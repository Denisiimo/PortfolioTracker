@using System.ComponentModel.DataAnnotations
@using PortfolioTracker.Components.Layout
@inject TransactionProvider TransactionProvider
@inject CurrencyProvider CurrencyProvider
@inject CurrencyListProvider CurrencyListProvider
@inject NavigationManager NavigationManager



<EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />

    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Add Currency</h4>
        </div>

        <div class="card-body bg-light">

            @* Currency Name *@
            <div class="form-group mb-3">
                <label for="name" class="form-label">Currency Name</label>
                <InputText id="name" class="form-control" @bind-Value="Model.CurrencyName" placeholder="Enter currency name" />
                <ValidationMessage For="@(() => Model.CurrencyName)" class="text-danger small" />
            </div>

            @* Buying Amount *@
            <div class="form-group mb-3">
                <label for="buyingAmount" class="form-label">Buying Amount</label>
                <InputNumber id="buyingAmount" class="form-control" @bind-Value="Model.BuyingAmount" placeholder="Enter amount" />
                <ValidationMessage For="@(() => Model.BuyingAmount)" class="text-danger small" />
            </div>

            @* Buying Price *@
            <div class="form-group mb-3">
                <label for="price" class="form-label">Buying Price</label>
                <InputNumber id="price" class="form-control" @bind-Value="Model.BuyingPrice" placeholder="Enter price" />
                <ValidationMessage For="@(() => Model.BuyingPrice)" class="text-danger small" />
            </div>

            @* Side *@
            <div class="form-group mb-3">
                <label for="side" class="form-label">Side</label>
                <InputSelect id="side" class="form-control" @bind-Value="Model.Side">
                    <option value="">
                        Select Side...
                    </option>
                    <option value="Buy">Buy</option>
                    <option value="Sell" disabled>Sell</option>
                </InputSelect>
                <ValidationMessage For="@(() => Model.Side)" class="text-danger small" />
            </div>
            <div class="mt-4">
                <button type="submit" class="btn btn-primary float-start">@(Model.Id == 0 ? "Add Currency" : "Save Changes")</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public EventCallback OnCurrencyAdded { get; set; }

    public CurrencyList? CurrencyList { get; set; }

    [Parameter]
    public Transaction? Transaction { get; set; }

    [Parameter]
    public Currency? Currency { get; set; }

    private TransactionCurrencyModel Model { get; set; }

    protected override void OnParametersSet()
    {
        Model = (Transaction == null && Currency == null && CurrencyList == null)
            ? new TransactionCurrencyModel() // If doesn't exist, make new
            : new TransactionCurrencyModel(Transaction, Currency, CurrencyList); // If does exist, assign the values
            
        base.OnParametersSet();
    }

    private async Task HandleSubmit()
    {
        var transaction = Transaction ?? new Transaction();
        var currency = Currency ?? new Currency();
        var currencyList = new CurrencyList
            {
                Currency = currency,
                Transaction = transaction
            };

        transaction.Side = Model.Side;
        transaction.BuyingAmount = Model.BuyingAmount;
        transaction.BuyingPrice = Model.BuyingPrice;
        transaction.Date = DateTime.Now;

        currency.CurrencyName = Model.CurrencyName;

        currencyList.Id = Model.Id;

        if (transaction.Id == 0)
        {
            await TransactionProvider.AddTransactionAsync(transaction);
        }
        else
        {
            await TransactionProvider.UpdateTransactionAsync(transaction);
        }

        if (currency.Id == 0)
        {
            await CurrencyProvider.AddCurrencyAsync(currency);
        }
        else
        {
            await CurrencyProvider.UpdateCurrencyAsync(currency);
        }

        if (currencyList.Id == 0)
        {
            await CurrencyListProvider.AddCurrencyListAsync(currencyList);
        }
        else
        {
            await CurrencyListProvider.UpdateCurrencyListAsync(currencyList);
        }

        Model = new TransactionCurrencyModel();
        // NavigationManager.NavigateTo("/");

        await OnCurrencyAdded.InvokeAsync();
    }

    private sealed class TransactionCurrencyModel
    {
        [Required]
        public int Id { get; set; }

        [Required(ErrorMessage = "Please enter the currency name.")]
        public string CurrencyName { get; set; } = "";

        [Required(ErrorMessage = "Please enter the side of the transaction.")]
        public string Side { get; set; } = "";

        [Required(ErrorMessage = "Please enter the buying amount.")]
        [Range(0.001, double.MaxValue, ErrorMessage = "Buying amount must be greater than 0.")]
        public decimal BuyingAmount { get; set; }

        [Required(ErrorMessage = "Please enter the buying price.")]
        [Range(0.001, double.MaxValue, ErrorMessage = "Buying amount must be greater than 0.")]
        public decimal BuyingPrice { get; set; }

        [Required(ErrorMessage = "Please enter the date.")]
        public DateTime Date { get; set; }

        public TransactionCurrencyModel()
        {
        }
        public TransactionCurrencyModel(Transaction transaction, Currency currency, CurrencyList currencyList)
        {
            Side = transaction.Side;
            BuyingAmount = transaction.BuyingAmount;
            BuyingPrice = transaction.BuyingPrice;
            Date = transaction.Date;
            CurrencyName = currency.CurrencyName;
            Id = currencyList.Id;
        }
    }
}