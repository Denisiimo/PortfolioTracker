@using System.ComponentModel.DataAnnotations
@using PortfolioTracker.Components.Layout
@inject TransactionProvider TransactionProvider
@inject CurrencyProvider CurrencyProvider
@inject CurrencyListProvider CurrencyListProvider
@inject NavigationManager NavigationManager


@if (closeForm == false)
{
    <EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />

        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between">
                <h4 class="mb-0">@(Model.Id == 0 ? "Add Currency" : "Edit Currency")</h4>
                <button type="button" class="btn btn-danger float-start" @onclick="CloseForm">X</button>
            </div>

            <div class="card-body bg-light">
                @* Currency Name *@
                <div class="form-group mb-3">
                    <label for="name" class="form-label">
                        Currency Name
                    </label>
                    <small class="form-text text-muted">(i) Enter the name of the currency. This field is disabled if editing an existing currency.</small>
                    <InputText id="name" class="form-control" @bind-Value="Model.CurrencyName" placeholder="Enter currency name" autocomplete="off" disabled="@(Model.Id != 0)" />
                    <ValidationMessage For="@(() => Model.CurrencyName)" class="text-danger small" />
                </div>

                @* Buying Amount *@
                <div class="form-group mb-3">
                    <label for="buyingAmount" class="form-label">
                        Buying Amount
                    </label>
                    <small class="form-text text-muted">(i) Enter the amount you want to buy.</small>
                    <InputNumber id="buyingAmount" class="form-control" @bind-Value="Model.BuyingAmount" placeholder="Enter amount" autocomplete="off" />
                    <ValidationMessage For="@(() => Model.BuyingAmount)" class="text-danger small" />
                </div>

                @* Buying Price *@
                <div class="form-group mb-3">
                    <label for="price" class="form-label">
                        Buying Price
                    </label>
                    <small class="form-text text-muted">(i) Enter the price at which you're buying the currency.</small>
                    <InputNumber id="price" class="form-control" @bind-Value="Model.BuyingPrice" placeholder="Enter price" autocomplete="off" />
                    <ValidationMessage For="@(() => Model.BuyingPrice)" class="text-danger small" />
                </div>

                @* Side *@
                <div class="form-group mb-3">
                    <label for="side" class="form-label">
                        Side
                    </label>
                    <small class="form-text text-muted">(i) Select whether you're buying or selling the currency.</small>
                    <InputSelect id="side" class="form-control" @bind-Value="Model.Side">
                        <option value="">Select Side...</option>
                        <option value="Buy">Buy</option>
                        <option value="Sell" disabled>Sell</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => Model.Side)" class="text-danger small" />
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary float-start">@(Model.Id == 0 ? "Add Currency" : "Save Changes")</button>
                </div>
            </div>
        </div>
    </EditForm>

}

@code {
    public bool closeForm = false;

    public void UpdateCloseForm(bool value)
    {
        closeForm = value;
    }

    [Parameter] public EventCallback<bool> OnFormClose { get; set; }

    private void CloseForm()
    {
        closeForm = true;
        OnFormClose.InvokeAsync(closeForm); // Notify to close the form
    }

    [Parameter]
    public EventCallback<Task> OnCurrencyAdded { get; set; }

    public CurrencyList? CurrencyList { get; set; }

    [Parameter]
    public Transaction? Transaction { get; set; }

    [Parameter]
    public Currency? Currency { get; set; }

    private TransactionCurrencyModel Model { get; set; } = new TransactionCurrencyModel();

    public async Task SetModelAsync(Transaction transaction, Currency currency, CurrencyList currencyList)
    {
        Transaction = transaction;
        Currency = currency;
        CurrencyList = currencyList;

        Model = new TransactionCurrencyModel(transaction, currency, currencyList);
    }

    private async Task HandleSubmit()
    {
        // Check if we are editing an existing currency
        if (Model.Id > 0)
        {
            // Retrieve existing records based on the ID
            var existingCurrency = await CurrencyProvider.GetCurrencyByIdAsync(Model.Id);
            var existingTransaction = await TransactionProvider.GetTransactionByIdAsync(CurrencyList.Transaction.Id);

            // Update fields with new values
            existingCurrency.CurrencyName = Model.CurrencyName;
            existingTransaction.Side = Model.Side;
            existingTransaction.BuyingAmount = Model.BuyingAmount;
            existingTransaction.BuyingPrice = Model.BuyingPrice;
            existingTransaction.Date = DateTime.Now; // Update the date if needed

            // Update records in the database
            await CurrencyProvider.UpdateCurrencyAsync(existingCurrency);
            await TransactionProvider.UpdateTransactionAsync(existingTransaction);
        }
        else
        {
            // Create new instances for Transaction and Currency
            var currency = new Currency
                {
                    CurrencyName = Model.CurrencyName
                };

            var transaction = new Transaction
                {
                    CurrencyName = Model.CurrencyName,
                    Side = Model.Side,
                    BuyingAmount = Model.BuyingAmount,
                    BuyingPrice = Model.BuyingPrice,
                    Date = DateTime.Now
                };

            // Create CurrencyList to associate Currency and Transaction
            var currencyList = new CurrencyList
                {
                    Currency = currency,
                    Transaction = transaction
                };

            await CurrencyProvider.AddCurrencyAsync(currency);
            await TransactionProvider.AddTransactionAsync(transaction);
            await CurrencyListProvider.AddCurrencyListAsync(currencyList);
        }

        Model = new TransactionCurrencyModel();

        // Notify to update the list
        await OnCurrencyAdded.InvokeAsync();
    }

    private sealed class TransactionCurrencyModel
    {
        [Required]
        public int Id { get; set; }

        [Required(ErrorMessage = "Please enter the currency name.")]
        public string CurrencyName { get; set; } = "";

        [Required(ErrorMessage = "Please enter the side of the transaction.")]
        public string Side { get; set; } = "";

        [Required(ErrorMessage = "Please enter the buying amount.")]
        [Range(0.001, double.MaxValue, ErrorMessage = "Buying amount must be greater than 0.")]
        public decimal BuyingAmount { get; set; }

        [Required(ErrorMessage = "Please enter the buying price.")]
        [MinDoubleValue(0.0000001, ErrorMessage = "Buying price must be greater than 0.")]
        public decimal BuyingPrice { get; set; }

        [Required(ErrorMessage = "Please enter the date.")]
        public DateTime Date { get; set; }

        public TransactionCurrencyModel() { }

        public TransactionCurrencyModel(Transaction transaction, Currency currency, CurrencyList currencyList)
        {
            Side = transaction.Side;
            BuyingAmount = transaction.BuyingAmount;
            BuyingPrice = transaction.BuyingPrice;
            Date = transaction.Date;
            CurrencyName = currency.CurrencyName;
            Id = currencyList.Id;
        }
    }
}