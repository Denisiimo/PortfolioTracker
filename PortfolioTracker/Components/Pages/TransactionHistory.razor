@page "/TransactionHistory";

@inject TransactionProvider TransactionProvider;


<h3 class="transaction-title">Transaction History</h3>

@* Transaction Table *@
<table class="transaction-table">
    <thead>
        <tr>
            <th>Currency Name</th>
            <th>
                <button class="sort-button" @onclick="() => SortBy(amount)">
                    Amount @SortIndicator("Amount")
                </button>
            </th>
            <th>
                <button class="sort-button" @onclick="() => SortBy(side)">
                    Side @SortIndicator("Side")
                </button>
            </th>
            <th>Buying Price</th>
            <th>
                <button class="sort-button" @onclick="() => SortBy(date)">
                    Date @SortIndicator("Date")
                </button>
            </th>
        </tr>
    </thead>
    <tbody>
        @if (sortedTransactions != null)
        {
            @foreach (var transaction in sortedTransactions)
            {
                <tr>
                    <td>@transaction.CurrencyName</td>
                    <td>$@transaction.BuyingAmount</td>
                    <td>@transaction.Side</td>
                    <td>@transaction.BuyingPrice</td>
                    <td>@transaction.Date.ToString("yyyy-MM-dd HH:mm")</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td>No transactions yet.</td>
            </tr>
        }
    </tbody>
</table>


<style>
    .sort-button {
        background-color: #004080;
        color: white;
        border: 1px solid #003060;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        font: inherit;
        text-align: center;
    }

        .sort-button:hover {
            background-color: #002050;
            color: #e0e0e0;
            border-color: #001530;
        }

    .transaction-title {
        text-align: center;
        font-size: 2rem;
        font-weight: bold;
        color: #007BFF;
        margin-bottom: 20px;
    }

    .transaction-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px auto;
        font-size: 1rem;
        text-align: left;
    }

        .transaction-table th, .transaction-table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
        }

        .transaction-table th {
            background-color: #007BFF;
            color: white;
            font-weight: bold;
        }

        .transaction-table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .transaction-table tr:hover {
            background-color: #e9f5ff;
        }
</style>



@code {
    string amount = "Amount";
    string side = "Side";
    string date = "Date";

    private IEnumerable<Transaction> transactions;
    private IEnumerable<Transaction> sortedTransactions;
    private string currentSortColumn = "Date";
    private bool ascending = true;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionProvider.GetAllTransactionsAsync();
        sortedTransactions = transactions;
    }

    private void SortBy(string column)
    {
        if (currentSortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            currentSortColumn = column;
            ascending = true;
        }

        sortedTransactions = column switch
        {
            "Amount" => ascending
                ? transactions.OrderBy(t => t.BuyingAmount)
                : transactions.OrderByDescending(t => t.BuyingAmount),
            "Side" => ascending
                ? transactions.OrderBy(t => t.Side)
                : transactions.OrderByDescending(t => t.Side),
            "Date" => ascending
                ? transactions.OrderBy(t => t.Date)
                : transactions.OrderByDescending(t => t.Date),
            _ => transactions
        };
    }

    private MarkupString SortIndicator(string column)
    {
        if (currentSortColumn == column)
        {
            var arrow = ascending ? "▲" : "▼";
            return new MarkupString($"<span>{arrow}</span>");
        }

        return new MarkupString("");
    }
}
