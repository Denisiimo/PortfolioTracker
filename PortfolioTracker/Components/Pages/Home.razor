@page "/";
@using Binance.Spot
@using Newtonsoft.Json.Linq
@using PortfolioTracker.Components.Shared

@inject CurrencyProvider CurrencyProvider;
@inject CurrencyListProvider CurrencyListProvider;

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<CurrencyForm OnCurrencyAdded="@LoadCurrencies" />

<table class="table table-hover table-bordered align-middle mt-3">
    <thead class="table-dark">
        <tr>
            <th scope="col">#</th>
            <th scope="col">Currency</th>
            <th scope="col">Currency Price</th>
            <th scope="col">Buying Balance</th>
            <th scope="col">Current Balance</th>
            <th scope="col" class="text-center">
                <span class="text-success">Gain</span>/<span class="text-danger">Loss</span>
            </th>
            <th>Edit</th>
        </tr>
    </thead>
    <tbody>
        @if (currencyLists != null && currencyLists.Any())
        {
            int listId = 0;
            foreach (var currencyList in currencyLists)
            {
                if (currencyList?.Currency != null && currencyList?.Transaction != null)
                {
                    decimal livePrice = livePrices.ContainsKey(currencyList.Currency.CurrencyName)
                    ? System.Convert.ToDecimal(livePrices[currencyList.Currency.CurrencyName])
                    : 0;
                    decimal currentBalance = livePrice > 0
                    ? (currencyList.Transaction.BuyingAmount / currencyList.Transaction.BuyingPrice) * livePrice
                    : 0;
                    decimal gainLoss = livePrice > 0 ? currentBalance - currencyList.Transaction.BuyingAmount : 0;

                    <tr>
                        <th scope="row">@(listId += 1)</th>
                        <td>@currencyList.Currency.CurrencyName</td>
                        <td>@(livePrice > 0 ? $"${livePrice}" : "Loading...")</td>
                        <td>@($"${currencyList.Transaction.BuyingAmount}")</td>
                        <td>
                            @if (livePrice > 0)
                            {
                                @($"${Math.Round(currentBalance, 2)}")
                            }
                            else
                            {
                                <span>Loading...</span>
                            }
                        </td>
                        <td class="text-center">
                            @if (livePrice > 0)
                            {
                                <span class="@((gainLoss >= 0) ? "bg-success text-white p-1 rounded" : "bg-danger text-white p-1 rounded")">
                                    @("$"+Math.Round(gainLoss, 2))
                                </span>
                            }
                            else
                            {
                                <span>Loading...</span>
                            }
                        </td>
                        <td class="d-flex justify-content-between">
                            <button class="btn btn-danger btn-sm w-50" @onclick="() => RemoveCurrency(currencyList.Id)">Sell</button>
                            <button class="btn btn-primary btn-sm w-50" @onclick="() => EditCurrency(currencyList.Id)">Edit</button>
                        </td>
                    </tr>
                    
                }
            }
        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">No currencies available.</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private IEnumerable<Currency> currencies;

    // private IEnumerable<Transaction> transactions;

    private IEnumerable<CurrencyList> currencyLists;

    private Dictionary<string, string> livePrices = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrencies();

        // Create WebSocket for every currency to stream prices
        foreach (var currency in currencies)
        {
            var currencyName = currency.CurrencyName.ToLower();  // Ensure lowercase for WebSocket format
            var websocket = new MarketDataWebSocket($"{currencyName}usdt@aggTrade");

            websocket.OnMessageReceived(
                async (data) =>
                {
                    // Strips out only the price from received data about the currency
                    JObject jsonData = JObject.Parse(data);
                    var livePriceString = (string)jsonData["p"];

                    // Parse the live price as a decimal and round to 3 decimal places
                    if (decimal.TryParse(livePriceString, out var livePrice))
                    {
                        decimal roundedLivePrice;

                        if (livePrice >= 1)
                        {
                            roundedLivePrice = Math.Round(livePrice, 2);
                        }
                        else if (livePrice < 1 && livePrice >= 0.01M)
                        {
                            roundedLivePrice = Math.Round(livePrice, 4);
                        }
                        else
                        {
                            roundedLivePrice = Math.Round(livePrice, 8);
                        }
                        // var roundedLivePrice = Math.Round(livePrice, 3);

                        livePrices[currency.CurrencyName] = roundedLivePrice.ToString();
                    }

                    await InvokeAsync(StateHasChanged);
                }, CancellationToken.None);

            // await websocket.ConnectAsync(CancellationToken.None);
        }
    }

    private async Task LoadCurrencies()
    {
        currencyLists = await CurrencyListProvider.GetAllCurrencyListsAsync();
        currencies = await CurrencyProvider.GetAllCurrenciesAsync();
    }

    private async Task RemoveCurrency(int currencyListId)
    {
        await CurrencyListProvider.RemoveCurrencyListAsync(currencyListId);
    }

    private async Task EditCurrency(int currencyListId)
    {
        await CurrencyListProvider.EditCurrencyListAsync(currencyListId);
    }
}
