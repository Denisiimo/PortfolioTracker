@page "/";
@using ApexCharts
@attribute [Authorize]

@using Binance.Spot
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json.Linq
@using PortfolioTracker.Components.Shared
@using PortfolioTracker.Context

@inject NavigationManager Navigation
@inject CurrencyProvider CurrencyProvider;
@inject CurrencyListProvider CurrencyListProvider;
@inject GraphProvider GraphProvider;
@inject PortfolioValueService PortfolioValueService
@inject PortfolioValueGraph PortfolioValueGraph;

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1 class="text-center display-3 mt-2">
    <span style="color: #007bff; font-weight: bold;">Total balance: </span>
    <span style="color: white; font-weight: bold; background-color: #007bff; padding: 0 10px; border-radius: 5px;">
        @($"${Math.Round(totalValue, 2)}")
    </span>
</h1>

<div style="display: flex; justify-content: center; align-items: center;" class="mt-3">
    <button @onclick="InvokeSavePortfolioValue"
            style="color: white;
                   background-color: #007bff;
                   font-weight: bold;
                   padding: 10px 20px;
                   border: none;
                   border-radius: 5px;
                   cursor: pointer;
                   transition: background-color 0.3s;">
        Save Current Portfolio Value
    </button>
</div>

<PortfolioValueGraph @ref="portfolioValueGraph" />

@if (showBtn)
{
    <button type="button" class="btn btn-primary float-start mb-3" @onclick="ShowForm">Add Currency</button>
}

@if (showForm)
{
    <CurrencyForm @ref="currencyForm" OnFormClose="HandleFormClose" OnCurrencyAdded="@LoadCurrencies" />
}

<table class="table table-hover table-bordered align-middle mt-3">
    <thead class="table-dark">
        <tr>
            <th scope="col">#</th>
            <th scope="col">Currency</th>
            <th scope="col">Currency Price</th>
            <th scope="col">Buying Amount</th>
            <th scope="col">Current Balance</th>
            <th scope="col" class="text-center">
                <span class="text-success">Gain</span>/<span class="text-danger">Loss</span>
            </th>
            <th>Edit</th>
        </tr>
    </thead>
    <tbody>
        @if (currencyLists != null && currencyLists.Any())
        {
            int listId = 0;
            foreach (var currencyList in currencyLists)
            {
                if (currencyList?.Currency != null && currencyList?.Transaction != null)
                {
                    decimal livePrice = livePrices.ContainsKey(currencyList.Currency.CurrencyName) 
                    ? System.Convert.ToDecimal(livePrices[currencyList.Currency.CurrencyName])
                    : 0; // Stores the live price for each currency

                    decimal currentBalance = livePrice > 0
                    ? (currencyList.Transaction.BuyingAmount / currencyList.Transaction.BuyingPrice) * livePrice
                    : 0; // Calculates the current balance of each currency

                    decimal gainLoss = livePrice > 0 ? currentBalance - currencyList.Transaction.BuyingAmount : 0; // Calculates whether the user is in a loss or profit

                    <tr>
                        <th scope="row">@(listId += 1)</th> @* Displays IDs *@
                        <td>@currencyList.Currency.CurrencyName</td> @* Displays currency names *@
                        <td>@if (livePrice > 0)
                            {
                                @livePrice;
                            }
                            else
                            {
                                <div class="spinner-border text-danger spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                        </td> @* Displays the price *@
                        <td>@($"${currencyList.Transaction.BuyingAmount}")</td>
                        <td>
                            @if (livePrice > 0)
                            {
                                @($"${Math.Round(currentBalance, 2)}") @* Displays current balance *@
                            }
                            else
                            {
                                <div class="spinner-border text-danger spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                        </td>
                        <td class="text-center">
                            @if (livePrice > 0)
                            {
                                <span class="@((gainLoss >= 0) ? "bg-success text-white p-1 rounded" : "bg-danger text-white p-1 rounded")">
                                    @("$" + Math.Round(gainLoss, 2)) @* Displays the profit in green and loss in red *@
                                </span>
                            }
                            else
                            {
                                <div class="spinner-border text-danger spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                        </td>
                        <td class="d-flex justify-content-between">
                            <button class="btn btn-danger btn-sm w-50" @onclick="() => RemoveCurrency(currencyList.Id)">Sell</button> @* Sell option *@
                            <button class="btn btn-primary btn-sm w-50" @onclick="() => EditCurrency(currencyList.Id)">Edit</button> @* Edit option*@
                        </td>
                    </tr>
                }
            }
        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">No currencies available.</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private PortfolioValueGraph? portfolioValueGraph;

    private async Task InvokeSavePortfolioValue()
    {
        if (portfolioValueGraph != null)
        {
            await portfolioValueGraph.SavePortfolioValueAsync();
            if (portfolioValueGraph.isDuplicate == false)
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
    }

    private bool showForm = true;
    private bool showBtn = false;

    private decimal totalValue => PortfolioValueService.CalculateTotalValue(currencyLists, livePrices);

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrencies();
    }

    private IEnumerable<Currency> currencies;
    private IEnumerable<CurrencyList> currencyLists;
    private Dictionary<string, string> livePrices = new Dictionary<string, string>();

    private async Task LoadCurrencies()
    {
        currencyLists = await CurrencyListProvider.GetAllCurrencyListsAsync();
        currencies = await CurrencyProvider.GetAllCurrenciesAsync();

        foreach (var currency in currencies)
        {
            if (!livePrices.ContainsKey(currency.CurrencyName))
            {
                var currencyName = currency.CurrencyName.ToLower(); // currency names stored in the database
                var websocket = new MarketDataWebSocket($"{currencyName}usdt@aggTrade"); // request data about those currencies

                websocket.OnMessageReceived(async (data) =>
                {
                    JObject jsonData = JObject.Parse(data);
                    var livePriceString = (string)jsonData["p"]; // p stands for price so only price is fetched

                    if (decimal.TryParse(livePriceString, out var livePrice))
                    {
                        decimal roundedLivePrice = livePrice >= 1 // rounds the prices up
                            ? Math.Round(livePrice, 2)
                            : livePrice >= 0.01M ? Math.Round(livePrice, 4) : Math.Round(livePrice, 8);

                        livePrices[currency.CurrencyName] = roundedLivePrice.ToString();
                    }

                    await InvokeAsync(StateHasChanged);
                }, CancellationToken.None);

                // await websocket.ConnectAsync(CancellationToken.None);
            }
        }

        StateHasChanged();
    }

    private CurrencyForm currencyForm;

    private void ShowForm()
    {
        showForm = true;
        showBtn = false;
    }

    private async Task HandleFormClose(bool isClosed)
    {
        showForm = false;
        showBtn = true;
    }

    private async Task RemoveCurrency(int currencyListId)
    {
        await CurrencyListProvider.RemoveCurrencyListAsync(currencyListId);
        await LoadCurrencies();
    }

    private async Task EditCurrency(int currencyListId)
    {
        var currencyList = await CurrencyListProvider.GetCurrencyListByIdAsync(currencyListId);
        if (currencyList != null)
        {
            // Ensure the form is opened first
            if (!showForm)
            {
                showForm = true;
                showBtn = false;
            }

            await Task.Delay(10); // Makes a small delay

            // Set the form model
            await currencyForm.SetModelAsync(currencyList.Transaction, currencyList.Currency, currencyList);

            // Trigger UI update to reflect the newly set model
            StateHasChanged();
        }
    }
}
