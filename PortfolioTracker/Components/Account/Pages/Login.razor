@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using PortfolioTracker.Components.Account.Shared
@using PortfolioTracker.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<EditForm OnValidSubmit="LoginUser" Model="Model" FormName="loginForm">
    <DataAnnotationsValidator />
    <div class="container" style="max-width: 800px; padding-top: 50px;">
        <div class="card p-4 shadow-sm">
            <h5 class="card-title text-center mb-4">Login</h5>

            <div class="form-group mb-3">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" placeholder="you@example.com" @bind-Value="Model.Email" />
                <div class="small text-danger">
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>
            </div>

            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                <div class="small text-danger">
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
            </div>

            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary">Log In</button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private string? statusMessage;
    private bool isError;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ApplicationScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Model.Email, Model.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            statusMessage = "Incorrect password or username";
            isError = true;
        }
    }

    private sealed class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = "";
    }
}
