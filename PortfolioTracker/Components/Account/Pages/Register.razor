@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using PortfolioTracker.Components.Account.Shared
@using PortfolioTracker.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

@page "/register"

<EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
    <DataAnnotationsValidator />
    <div class="container" style="max-width: 800px; padding-top: 50px;">
        <div class="card p-4 shadow-sm">
            <h5 class="card-title text-center mb-4">Register</h5>

            <div class="form-group mb-3">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" placeholder="you@example.com" @bind-Value="Model.Email" />
                <div class="small text-danger">
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>
            </div>

            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                <div class="small text-danger">
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
            </div>

            <div class="form-group mb-3">
                <label for="confirm">Confirm Password</label>
                <InputText id="confirm" type="password" class="form-control" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                <div class="small text-danger">
                    <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                </div>
            </div>

            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary">Register</button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    public async Task RegisterUser(EditContext editContext)
    {
        // create the user
        var user = new User
            {
                UserName = Model.Email,
                Email = Model.Email,
            };

        // add to the database
        var result = await UserManager.CreateAsync(user, Model.Password);

        // report the errors
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        // log the user in
        var userId = await UserManager.GetUserIdAsync(user);
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class RegisterModel
    {
        [Required(ErrorMessage = "Please enter your email.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Please enter a password.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}